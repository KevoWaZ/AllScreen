generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  reviews       Review[]
  watched       Watched[]
  watchlists    Watchlist[]
  lists         List[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ShowType {
  MOVIE
  TVSHOW
}

model Movie {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  releaseYear Int
  reviews     Review[]
  watched     Watched[]
  watchlists  Watchlist[]
  lists       List[]      @relation("MovieToList")
}

model TVShow {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  startYear   Int
  endYear     Int?
  reviews     Review[]
  watched     Watched[]
  watchlists  Watchlist[]
  lists       List[]      @relation("TVShowToList")
}

model Review {
  id      String   @id @default(uuid())
  rating  Float
  comment String?
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  movie   Movie?   @relation(fields: [movieId], references: [id])
  movieId Int?
  TVShow  TVShow?  @relation(fields: [TVId], references: [id])
  TVId    Int?
  type    ShowType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Watched {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  movie   Movie?   @relation(fields: [movieId], references: [id])
  movieId Int?
  TVShow  TVShow?  @relation(fields: [TVId], references: [id])
  TVId    Int?
  type    ShowType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Watchlist {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  movie   Movie?   @relation(fields: [movieId], references: [id])
  movieId Int?
  TVShow  TVShow?  @relation(fields: [TVId], references: [id])
  TVId    Int?
  type    ShowType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id          String   @id @default(uuid())
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  movies      Movie[]  @relation("MovieToList")
  TVShows     TVShow[] @relation("TVShowToList")
}
