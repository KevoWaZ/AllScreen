generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  name          String      @unique
  email         String      @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  bio           String?
  lists         List[]
  reviews       Review[]
  watched       Watched[]
  watchlists    Watchlist[]
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Movie {
  id           Int         @id @default(autoincrement())
  title        String
  description  String?
  poster       String?
  release_date DateTime?
  reviews      Review[]
  watched      Watched[]
  watchlists   Watchlist[]
  lists        List[]      @relation("MovieToList")
}

model TVShow {
  id             Int         @id @default(autoincrement())
  title          String
  description    String?
  endYear        Int?
  poster         String?
  first_air_date DateTime?
  reviews        Review[]
  watched        Watched[]
  watchlists     Watchlist[]
  lists          List[]      @relation("TVShowToList")
}

model Review {
  id        String   @id @default(uuid())
  rating    Float
  comment   String?
  userId    String
  movieId   Int?
  TVId      Int?
  type      ShowType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  TVShow    TVShow?  @relation(fields: [TVId], references: [id])
  movie     Movie?   @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Watched {
  id        String   @id @default(uuid())
  userId    String
  movieId   Int?
  TVId      Int?
  type      ShowType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  TVShow    TVShow?  @relation(fields: [TVId], references: [id])
  movie     Movie?   @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Watchlist {
  id        String   @id @default(uuid())
  userId    String
  movieId   Int?
  TVId      Int?
  type      ShowType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  TVShow    TVShow?  @relation(fields: [TVId], references: [id])
  movie     Movie?   @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model List {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  movies      Movie[]  @relation("MovieToList")
  TVShows     TVShow[] @relation("TVShowToList")
}

enum ShowType {
  MOVIE
  TVSHOW
}
